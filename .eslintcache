[{"/Users/phanhoang/Documents/Project/client/src/index.js":"1","/Users/phanhoang/Documents/Project/client/src/App.js":"2","/Users/phanhoang/Documents/Project/client/src/reportWebVitals.js":"3","/Users/phanhoang/Documents/Project/client/src/pages/Home.js":"4","/Users/phanhoang/Documents/Project/client/src/component/router.js":"5","/Users/phanhoang/Documents/Project/client/src/component/book/listBook.js":"6","/Users/phanhoang/Documents/Project/client/src/pages/Library.js":"7","/Users/phanhoang/Documents/Project/client/src/api/index.js":"8","/Users/phanhoang/Documents/Project/client/src/component/header/header.js":"9","/Users/phanhoang/Documents/Project/client/src/component/footer/footer.js":"10","/Users/phanhoang/Documents/Project/client/src/component/book/search.js":"11","/Users/phanhoang/Documents/Project/client/src/reducers/index.js":"12","/Users/phanhoang/Documents/Project/client/src/reducers/login.reducer.js":"13","/Users/phanhoang/Documents/Project/client/src/constants/index.js":"14","/Users/phanhoang/Documents/Project/client/src/hooks/useAuth.js":"15","/Users/phanhoang/Documents/Project/client/src/reducers/newbook.reducer.js":"16","/Users/phanhoang/Documents/Project/client/src/component/book/book_details.js":"17","/Users/phanhoang/Documents/Project/client/src/component/header/slide.js":"18","/Users/phanhoang/Documents/Project/client/src/reducers/review.reducer.js":"19","/Users/phanhoang/Documents/Project/client/src/component/book/book_favorite.js":"20","/Users/phanhoang/Documents/Project/client/src/utils/paypal.js":"21","/Users/phanhoang/Documents/Project/client/src/reducers/formLogin.js":"22","/Users/phanhoang/Documents/Project/client/src/component/myLibrary/myLibrary.js":"23","/Users/phanhoang/Documents/Project/client/src/component/book/book.read.js":"24","/Users/phanhoang/Documents/Project/client/src/component/me/updateMe.js":"25","/Users/phanhoang/Documents/Project/client/src/component/me/addCoins.history.js":"26","/Users/phanhoang/Documents/Project/client/src/component/privacy/index.js":"27"},{"size":754,"mtime":1612274438131,"results":"28","hashOfConfig":"29"},{"size":529,"mtime":1614761905619,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1612166816275,"results":"31","hashOfConfig":"29"},{"size":1285,"mtime":1614767229454,"results":"32","hashOfConfig":"29"},{"size":1097,"mtime":1615253975507,"results":"33","hashOfConfig":"29"},{"size":8720,"mtime":1615178320433,"results":"34","hashOfConfig":"29"},{"size":8558,"mtime":1615278276083,"results":"35","hashOfConfig":"29"},{"size":3400,"mtime":1615358836870,"results":"36","hashOfConfig":"29"},{"size":35720,"mtime":1615197644548,"results":"37","hashOfConfig":"29"},{"size":2366,"mtime":1615278571298,"results":"38","hashOfConfig":"29"},{"size":3118,"mtime":1614830434729,"results":"39","hashOfConfig":"29"},{"size":308,"mtime":1614580633314,"results":"40","hashOfConfig":"29"},{"size":312,"mtime":1614580603605,"results":"41","hashOfConfig":"29"},{"size":220,"mtime":1614580415000,"results":"42","hashOfConfig":"29"},{"size":771,"mtime":1614483006566,"results":"43","hashOfConfig":"29"},{"size":309,"mtime":1613364752389,"results":"44","hashOfConfig":"29"},{"size":19262,"mtime":1615278955051,"results":"45","hashOfConfig":"29"},{"size":1184,"mtime":1614738412055,"results":"46","hashOfConfig":"29"},{"size":312,"mtime":1614217545655,"results":"47","hashOfConfig":"29"},{"size":4956,"mtime":1615197530853,"results":"48","hashOfConfig":"29"},{"size":2684,"mtime":1614953435315,"results":"49","hashOfConfig":"29"},{"size":326,"mtime":1614580726820,"results":"50","hashOfConfig":"29"},{"size":16171,"mtime":1615278630908,"results":"51","hashOfConfig":"29"},{"size":4856,"mtime":1615276033671,"results":"52","hashOfConfig":"29"},{"size":10896,"mtime":1615193373474,"results":"53","hashOfConfig":"29"},{"size":3385,"mtime":1615193230413,"results":"54","hashOfConfig":"29"},{"size":1794,"mtime":1615254566189,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1qfk95l",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/Users/phanhoang/Documents/Project/client/src/index.js",[],["117","118"],"/Users/phanhoang/Documents/Project/client/src/App.js",[],"/Users/phanhoang/Documents/Project/client/src/reportWebVitals.js",[],"/Users/phanhoang/Documents/Project/client/src/pages/Home.js",[],"/Users/phanhoang/Documents/Project/client/src/component/router.js",[],"/Users/phanhoang/Documents/Project/client/src/component/book/listBook.js",["119"],"import React, { useEffect, useState } from \"react\";\nimport Alert from \"react-s-alert\";\nimport queryString from \"query-string\";\nimport { getBook, FavoriteBook, createOrder } from \"../../api/index\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as types from \"../../constants/index\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport { Image, Modal, Button, Form } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport {\n  faHeart as fasHeart,\n  faCoins,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nconst validationSchema = yup.object().shape({\n  totalDate: yup\n    .number()\n    .min(1, \"Please enter a day number\")\n    .required(\"Please enter a date number\"),\n});\nexport const Books = (props) => {\n  const initialValues = {\n    totalDate: 0,\n  };\n  const dispatch = useDispatch();\n  const [book, setBook] = useState({});\n  const [isLoad, setLoad] = useState(false);\n  const [formBorrow, setFormBorrow] = useState(false);\n  const getData = async () => {\n    try {\n      const paramsString = queryString.stringify(props.pagination);\n      const result = await getBook(paramsString);\n      if (result.status === 200) {\n        dispatch({ type: types.NEW_BOOKS, payload: result.data.data.data });\n      }\n    } catch (error) {\n      return Alert.error(\n        `<div role=\"alert\"><i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i> ${error.response.data.message}</div>`,\n        {\n          html: true,\n          position: \"top-right\",\n          effect: \"slide\",\n        }\n      );\n    }\n  };\n  useEffect(() => {\n    getData();\n  }, [props.pagination, isLoad]);\n  const newBooks = useSelector((state) => {\n    return state.newBooks.data;\n  });\n  const user = useSelector((state) => {\n    return state.login.data;\n  });\n\n  const addToMyFavorite = async (id) => {\n    if (localStorage.getItem(\"_id\") === null) {\n      dispatch({ type: \"FORM_LOGIN_STATUS\", payload: true });\n    } else {\n      await FavoriteBook({\n        bookId: id,\n        userId: localStorage.getItem(\"_id\"),\n      });\n      setLoad(!isLoad);\n    }\n  };\n  const borrow = async (book) => {\n    if (localStorage.getItem(\"_id\") === null) {\n      dispatch({ type: \"FORM_LOGIN_STATUS\", payload: true });\n    } else {\n      setBook(book);\n      setFormBorrow(true);\n    }\n  };\n  return (\n    <div className=\"row\">\n      <Alert stack={{ limit: 3 }} />\n      {newBooks.map((item) => (\n        <div className={props.position} key={item._id}>\n          <div className=\"product-image\">\n            <div className=\"grid-view-item__link\">\n              <NavLink to={`books/${item._id}`}>\n                <Image\n                  style={{ width: 400, height: 280 }}\n                  className=\"lazyload\"\n                  data-src={item.images}\n                  src={item.images}\n                  alt=\"image\"\n                  title={item.description}\n                />\n              </NavLink>\n            </div>\n            <div className=\"button-set\">\n              <div className=\"wishlist-btn\">\n                <button\n                  className=\"btn wishlist add-to-wishlist\"\n                  onClick={() => addToMyFavorite(item._id)}\n                >\n                  <FontAwesomeIcon\n                    icon={\n                      item.userFavorite.some(\n                        (userId) => userId._id === user._id\n                      )\n                        ? fasHeart\n                        : faHeart\n                    }\n                    color={\n                      item.userFavorite.some(\n                        (userId) => userId._id === user._id\n                      )\n                        ? \"#ed8a8a\"\n                        : \"#ececec\"\n                    }\n                  />\n                </button>\n              </div>\n            </div>\n          </div>\n          <div className=\"product-details text-center\">\n            <div\n              style={{\n                height: 50,\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n              }}\n            >\n              <NavLink to={`books/${item._id}`}>{item.book_name}</NavLink>\n            </div>\n            <div className=\"product-price\">\n              <span className=\"price\">\n                {item.price} <FontAwesomeIcon icon={faCoins} color=\"#64ccdb\" />/\n                day\n              </span>\n            </div>\n            <button\n              className=\"btn btn-success btn-addto-cart\"\n              type=\"button\"\n              style={{ marginTop: 3 }}\n              tabIndex={0}\n              onClick={() => {\n                borrow(item);\n              }}\n            >\n              Borrow\n            </button>\n          </div>\n        </div>\n      ))}\n      <Modal\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        show={formBorrow}\n        onHide={() => {\n          setFormBorrow(false);\n        }}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">Borrow</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={async (values) => {\n              try {\n                const totalPrice = values.totalDate * book.price;\n                if (totalPrice > user.wallet) {\n                  return Alert.warning(\n                    `<div role=\"alert\"><i class=\"fas fa-exclamation-triangle\"></i>\n                                      Your eCoins are not enough to borrow this book\n                                      </div>`,\n                    {\n                      html: true,\n                      position: \"top-right\",\n                      effect: \"slide\",\n                    }\n                  );\n                }\n                values.price = totalPrice;\n                values.userId = user._id;\n                values.bookId = book._id;\n                values.endAt = moment(new Date())\n                  .add(values.totalDate, \"day\")\n                  .format(\"YYYY-MM-DD HH:MM\");\n                values.startedAt = moment(new Date()).format(\n                  \"YYYY-MM-DD HH:MM\"\n                );\n                setFormBorrow(false);\n                const result = await createOrder(values);\n                Alert.success(\n                  `<div role=\"alert\">\n                  <i class=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n                              ${result.data.message}\n                              </div>`,\n                  {\n                    html: true,\n                    position: \"top-right\",\n                    effect: \"slide\",\n                  }\n                );\n                return <Redirect to={`/books/read/${result.data.order._id}`} />;\n              } catch (error) {\n                return Alert.error(\n                  `<div role=\"alert\"><i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i>\n                                  ${error.response.data.message}</div>`,\n                  {\n                    html: true,\n                    position: \"top-right\",\n                    effect: \"slide\",\n                  }\n                );\n              }\n            }}\n          >\n            {(props) => (\n              <Form\n                onSubmit={props.handleSubmit}\n                id=\"new-review-form\"\n                className=\"new-review-form\"\n              >\n                <Form.Label column lg={3.5}>\n                  Total Date: Day\n                </Form.Label>\n                <Form.Control\n                  lg={4}\n                  type=\"text\"\n                  name=\"totalDate\"\n                  placeholder=\"Enter total date borrow\"\n                  style={{ width: \"65%\" }}\n                  className=\"ml-3\"\n                  onChange={props.handleChange}\n                  onBlur={props.handleBlur}\n                  isInvalid={props.touched.totalDate && props.errors.totalDate}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {props.touched.totalDate && props.errors.totalDate}\n                </Form.Control.Feedback>\n                <Modal.Footer>\n                  <Button className=\"btn btn-primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            )}\n          </Formik>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n};\n","/Users/phanhoang/Documents/Project/client/src/pages/Library.js",[],"/Users/phanhoang/Documents/Project/client/src/api/index.js",[],"/Users/phanhoang/Documents/Project/client/src/component/header/header.js",[],"/Users/phanhoang/Documents/Project/client/src/component/footer/footer.js",[],"/Users/phanhoang/Documents/Project/client/src/component/book/search.js",["120"],"import React, { useState, useEffect } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { getBook } from \"../../api/index\";\nimport queryString from \"query-string\";\nimport Alert from \"react-s-alert\";\nimport { NavLink } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCoins } from \"@fortawesome/free-solid-svg-icons\";\nexport const Search = () => {\n  const [searchResult, setSearchResult] = useState([]);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 5,\n    searchKey: \"\",\n  });\n  const search = async () => {\n    try {\n      const paramsString = queryString.stringify(pagination);\n      const result = await getBook(paramsString);\n      if (result.status === 200) {\n        setSearchResult(result.data.data.data);\n      }\n    } catch (error) {\n      return Alert.error(`<div role=\"alert\">Can Not Get New Book</div>`, {\n        html: true,\n        position: \"top-right\",\n        effect: \"slide\",\n      });\n    }\n  };\n  useEffect(() => {\n    search();\n  }, [pagination]);\n  return (\n    <div className=\"search\">\n      <div className=\"search__form\">\n        <div className=\"search-bar__form\">\n          <button className=\"go-btn search__button\">\n            <i className=\"icon anm anm-search-l\" />\n          </button>\n          <input\n            className=\"search__input\"\n            type=\"search\"\n            name=\"search\"\n            placeholder=\"Search entire store...\"\n            aria-label=\"Search\"\n            value={pagination.searchKey}\n            onChange={(event) => {\n              setPagination({ ...pagination, searchKey: event.target.value });\n            }}\n          />\n          <div style={{ marginTop: 10 }}>\n            {searchResult.map((item) => (\n              <NavLink\n                key={item._id}\n                to={`/books/${item._id}`}\n                onClick={() => {\n                  document.getElementById(\"closeSearch\").click();\n                }}\n              >\n                <Card>\n                  <Card.Header>{item.book_name}</Card.Header>\n                  <Card.Body>\n                    <Card.Img\n                      src={item.images}\n                      style={{ width: 100, height: 100 }}\n                    />\n                    <Card.Title>{item.authors[0].authorName}</Card.Title>\n                    <Card.Text>\n                      {\" \"}\n                      {item.price}{\" \"}\n                      <FontAwesomeIcon icon={faCoins} color=\"#64ccdb\" /> / day\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              </NavLink>\n            ))}\n          </div>\n          <button\n            className=\"btn btn-dark\"\n            onClick={() => {\n              setPagination({ ...pagination, limit: pagination.limit + 5 });\n            }}\n          >\n            Load More\n          </button>\n        </div>\n        <button\n          type=\"button\"\n          className=\"search-trigger close-btn\"\n          id=\"closeSearch\"\n        >\n          <i className=\"anm anm-times-l\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n","/Users/phanhoang/Documents/Project/client/src/reducers/index.js",[],"/Users/phanhoang/Documents/Project/client/src/reducers/login.reducer.js",[],"/Users/phanhoang/Documents/Project/client/src/constants/index.js",[],"/Users/phanhoang/Documents/Project/client/src/hooks/useAuth.js",[],"/Users/phanhoang/Documents/Project/client/src/reducers/newbook.reducer.js",[],"/Users/phanhoang/Documents/Project/client/src/component/book/book_details.js",["121"],"import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport \"react-tabs/style/react-tabs.css\";\nimport * as yup from \"yup\";\nimport {\n  createReview,\n  getReview,\n  createOrder,\n  getBookDetails,\n  FavoriteBook,\n} from \"../../api/index\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport {\n  faHeart as fasHeart,\n  faCoins,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport Alert from \"react-s-alert\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\nimport moment from \"moment\";\nimport queryString from \"query-string\";\nconst validationSchema = yup.object().shape({\n  content: yup.string().required(\"Please enter your review\"),\n});\nconst orderValidationSchema = yup.object().shape({\n  totalDate: yup\n    .number()\n    .min(1, \"Please enter a day number\")\n    .required(\"Please enter a date number\"),\n});\nexport const BookDetails = (prop) => {\n  const dispatch = useDispatch();\n  const orderInitialValues = {\n    totalDate: 0,\n  };\n  const user = useSelector((state) => {\n    return state.login.data;\n  });\n  const [showWriteReview, setWriteReview] = useState(false);\n  const [reviews, setReview] = useState([]);\n  const initialValues = {\n    content: \"\",\n  };\n  const [reviewPage, setReviewPage] = useState({\n    page: 1,\n    limit: 5,\n  });\n  const bookId = prop.match.params.book_id;\n  const [bookDetail, setBookDetail] = useState({});\n  const [publisher, setPublisher] = useState({});\n  const [userFavorite, setUserFavorite] = useState([]);\n  const [isLoad, setLoad] = useState(false);\n  const getBook = async (bookId) => {\n    const book = await getBookDetails(bookId);\n    setBookDetail(book.data.data);\n    setPublisher(book.data.data.publisher);\n    setUserFavorite(book.data.data.userFavorite);\n  };\n  useEffect(() => {\n    getBook(bookId);\n  }, [bookId, reviews, isLoad]);\n  const getReviews = async () => {\n    const paramsString = queryString.stringify(reviewPage);\n    const result = await getReview(bookId, paramsString);\n    setReview(result.data.data);\n    return dispatch({ type: \"BOOK_REVIEWS\", payload: result.data.data });\n  };\n  useEffect(() => {\n    return getReviews();\n  }, [showWriteReview, reviewPage]);\n  const addToMyFavorite = async (id) => {\n    if (localStorage.getItem(\"_id\") === null) {\n      dispatch({ type: \"FORM_LOGIN_STATUS\", payload: true });\n    } else {\n      const response = await FavoriteBook({\n        bookId: bookDetail._id,\n        userId: user._id,\n      });\n      setBookDetail(response.data.result);\n      setPublisher(response.data.result.publisher);\n      setLoad(!isLoad);\n    }\n  };\n  return (\n    <div id=\"MainContent\" className=\"main-content\" role=\"main\">\n      <Alert stack={{ limit: 3 }} />\n      <div className=\"bredcrumbWrap\">\n        <div className=\"container breadcrumbs\">\n          <NavLink to=\"/library\">Books</NavLink>\n          <span aria-hidden=\"true\">›</span>\n          <span>{bookDetail.book_name}</span>\n        </div>\n      </div>\n      {/*End Breadcrumb*/}\n      <div\n        id=\"ProductSection-product-template\"\n        className=\"product-template__container prstyle2 container\"\n      >\n        {/*#ProductSection-product-template*/}\n        <div className=\"product-single product-single-1\">\n          <div className=\"row\">\n            <div className=\"col-lg-6 col-md-6 col-sm-12 col-12\">\n              <div className=\"product-details-img product-single__photos bottom\">\n                <div className=\"zoompro-wrap product-zoom-right pl-20\">\n                  <div className=\"zoompro-span\">\n                    <img\n                      className=\"blur-up lazyload zoompro\"\n                      alt=\"\"\n                      src={bookDetail.images ? bookDetail.images : null}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6 col-md-6 col-sm-12 col-12\">\n              <div className=\"product-single__meta\">\n                <h1 className=\"product-single__title\">\n                  {bookDetail.book_name}\n                </h1>\n                <div className=\"prInfoRow\">\n                  <div className=\"product-stock\">\n                    Author:\n                    {bookDetail.authors\n                      ? bookDetail.authors.map((item) => (\n                          <span\n                            style={{ marginLeft: 3 }}\n                            className=\"instock\"\n                            key={item._id}\n                          >\n                            {item.authorName}\n                          </span>\n                        ))\n                      : null}\n                  </div>\n                  <div className=\"product-sku\">\n                    Publisher:{\" \"}\n                    <span className=\"variant-sku\">\n                      {publisher.publisherName}\n                    </span>\n                  </div>\n                </div>\n                <p className=\"product-single__price product-single__price-product-template\">\n                  <span className=\"visually-hidden\">Regular price</span>\n                  <span className=\"product-price__price product-price__price-product-template product-price__sale product-price__sale--single\">\n                    <span id=\"ProductPrice-product-template\">\n                      <span className=\"money\" style={{ color: \"black\" }}>\n                        {bookDetail.price}{\" \"}\n                        <FontAwesomeIcon icon={faCoins} color=\"#64ccdb\" /> / day\n                      </span>\n                    </span>\n                  </span>\n                </p>\n                {/* Product Action */}\n                <div className=\"product-action clearfix\">\n                  <Formik\n                    initialValues={orderInitialValues}\n                    onSubmit={async (values) => {\n                      try {\n                        if (!user._id) {\n                          return Alert.warning(\n                            `<div role=\"alert\"><i class=\"fas fa-exclamation-triangle\"></i>\n                                      Please sign in to read\n                                      </div>`,\n                            {\n                              html: true,\n                              position: \"top-right\",\n                              effect: \"slide\",\n                            }\n                          );\n                        }\n                        const totalPrice = values.totalDate * bookDetail.price;\n                        if (totalPrice > user.wallet) {\n                          return Alert.warning(\n                            `<div role=\"alert\"><i class=\"fas fa-exclamation-triangle\"></i>\n                                      Your eCoins are not enough to borrow this book\n                                      </div>`,\n                            {\n                              html: true,\n                              position: \"top-right\",\n                              effect: \"slide\",\n                            }\n                          );\n                        }\n                        values.price = totalPrice;\n                        values.userId = user._id;\n                        values.bookId = bookDetail._id;\n                        values.endAt = moment(new Date())\n                          .add(values.totalDate, \"day\")\n                          .format(\"YYYY-MM-DD HH:MM\");\n                        values.startedAt = moment(new Date()).format(\n                          \"YYYY-MM-DD\"\n                        );\n\n                        const result = await createOrder(values);\n                        Alert.success(\n                          `<div role=\"alert\"><i class=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n                                      ${result.data.message}\n                                      </div>`,\n                          {\n                            html: true,\n                            position: \"top-right\",\n                            effect: \"slide\",\n                          }\n                        );\n                        return (\n                          <Redirect\n                            to={`/books/read/${result.data.order._id}`}\n                          />\n                        );\n                      } catch (error) {\n                        return Alert.error(\n                          `<div role=\"alert\"><i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i>\n                                  ${error.response.data.message}</div>`,\n                          {\n                            html: true,\n                            position: \"top-right\",\n                            effect: \"slide\",\n                          }\n                        );\n                      }\n                    }}\n                    validationSchema={orderValidationSchema}\n                  >\n                    {(props) => (\n                      <Form onSubmit={props.handleSubmit}>\n                        <div style={{ marginBottom: 5 }}>\n                          <span>Day number</span>\n                          <Form.Control\n                            type=\"string\"\n                            name=\"totalDate\"\n                            onChange={props.handleChange}\n                            onBlur={props.handleBlur}\n                            isInvalid={\n                              props.touched.totalDate && props.errors.totalDate\n                            }\n                          />\n                          <Form.Control.Feedback type=\"invalid\">\n                            {props.touched.totalDate && props.errors.totalDate}\n                          </Form.Control.Feedback>\n                        </div>\n                        <div className=\"product-form__item--submit\">\n                          <Button\n                            type=\"submit\"\n                            className=\"btn btn-success product-form__cart-submit\"\n                          >\n                            <span>{\"Borrow\"}</span>\n                          </Button>\n                        </div>\n                      </Form>\n                    )}\n                  </Formik>\n                </div>\n                {/* End Product Action */}\n                <div className=\"display-table shareRow\">\n                  <div className=\"display-table-cell medium-up--one-third\">\n                    <div className=\"wishlist-btn\">\n                      <button\n                        className=\"wishlist add-to-wishlist\"\n                        title=\"Add to Wishlist\"\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => {\n                          addToMyFavorite(bookDetail._id);\n                        }}\n                      >\n                        <FontAwesomeIcon\n                          icon={\n                            userFavorite.some((userId) => userId === user._id)\n                              ? fasHeart\n                              : faHeart\n                          }\n                          color={\n                            userFavorite.some((userId) => userId === user._id)\n                              ? \"#ed8a8a\"\n                              : \"#ececec\"\n                          }\n                        />\n                        <span>Add to Wishlist</span>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/*Product Tabs*/}\n            </div>\n          </div>\n          <div className=\"container\" style={{ marginTop: 10 }}>\n            <Tabs>\n              <TabList>\n                <Tab>Description</Tab>\n                <Tab\n                  onClick={() => {\n                    getReviews();\n                  }}\n                >\n                  Review\n                </Tab>\n              </TabList>\n\n              <TabPanel>\n                <p>{bookDetail.description}</p>\n              </TabPanel>\n              <TabPanel>\n                <Modal\n                  show={showWriteReview}\n                  size=\"lg\"\n                  aria-labelledby=\"contained-modal-title-vcenter\"\n                  centered\n                  onHide={() => {\n                    setWriteReview(false);\n                  }}\n                >\n                  <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                      My Review\n                    </Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>\n                    <Formik\n                      initialValues={initialValues}\n                      onSubmit={async (values) => {\n                        try {\n                          values.user = user._id;\n                          values.bookId = bookId;\n                          await createReview(values);\n                          setWriteReview(false);\n                          return Alert.success(\n                            `<div role=\"alert\"> <i class=\"fa fa-check-circle\" aria-hidden=\"true\"></i>\n                                      Write review successfully\n                                      </div>`,\n                            {\n                              html: true,\n                              position: \"top-right\",\n                              effect: \"slide\",\n                            }\n                          );\n                        } catch (error) {\n                          return Alert.error(\n                            `<div role=\"alert\">\n                           <i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i>\n                                  ${error.response.data.message}</div>`,\n                            {\n                              html: true,\n                              position: \"top-right\",\n                              effect: \"slide\",\n                            }\n                          );\n                        }\n                      }}\n                      validationSchema={validationSchema}\n                    >\n                      {(props) => (\n                        <Form\n                          onSubmit={props.handleSubmit}\n                          id=\"new-review-form\"\n                          className=\"new-review-form\"\n                        >\n                          <h3 className=\"spr-form-title\">Write a review</h3>\n                          <fieldset className=\"spr-form-review\">\n                            <div className=\"spr-form-review-body\">\n                              <label className=\"spr-form-label\">Content</label>\n                              <div className=\"spr-form-input\">\n                                <Form.Control\n                                  className=\"spr-form-input spr-form-input-textarea \"\n                                  name=\"content\"\n                                  as=\"textarea\"\n                                  rows={10}\n                                  placeholder=\"Write your review here\"\n                                  onChange={props.handleChange}\n                                  onBlur={props.handleBlur}\n                                  isInvalid={\n                                    props.touched.content &&\n                                    props.errors.content\n                                  }\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                  {props.touched.content &&\n                                    props.errors.content}\n                                </Form.Control.Feedback>\n                              </div>\n                            </div>\n                          </fieldset>\n                          <fieldset className=\"spr-form-actions\">\n                            <input\n                              type=\"submit\"\n                              className=\"spr-button spr-button-primary button button-primary btn btn-primary\"\n                              defaultValue=\"Submit Review\"\n                            />\n                          </fieldset>\n                        </Form>\n                      )}\n                    </Formik>\n                  </Modal.Body>\n                </Modal>\n                <div id=\"shopify-product-reviews\">\n                  <div className=\"spr-container\">\n                    <div className=\"spr-content\">\n                      {user._id ? (\n                        <div className=\"spr-form clearfix\">\n                          <button\n                            className=\"btn btn-primary\"\n                            onClick={() => {\n                              setWriteReview(true);\n                            }}\n                          >\n                            Write Review\n                          </button>\n                        </div>\n                      ) : null}\n\n                      <div className=\"spr-reviews\">\n                        {reviews.map((review) => (\n                          <div className=\"spr-review\" key={review._id}>\n                            <div className=\"spr-review-header\">\n                              <h3 className=\"spr-review-header-title\">\n                                <img\n                                  src={review.user.photoUrl}\n                                  alt=\"\"\n                                  className=\"border rounded-circle\"\n                                  style={{ width: 35, marginRight: 3 }}\n                                />\n                                {review.user.displayName}\n                              </h3>\n                              <span className=\"spr-review-header-byline\">\n                                <strong>\n                                  {moment(review.createdAt).format(\n                                    \"DD.MM.YYYY HH:mm\"\n                                  )}\n                                </strong>\n                              </span>\n                            </div>\n                            <div className=\"spr-review-content\">\n                              <p className=\"spr-review-content-body\">\n                                {review.content}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                        <button\n                          className=\"btn btn-dark\"\n                          onClick={() => {\n                            setReviewPage({\n                              ...reviewPage,\n                              limit: reviewPage.limit + 5,\n                            });\n                          }}\n                        >\n                          Load More\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TabPanel>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/phanhoang/Documents/Project/client/src/component/header/slide.js",[],"/Users/phanhoang/Documents/Project/client/src/reducers/review.reducer.js",[],"/Users/phanhoang/Documents/Project/client/src/component/book/book_favorite.js",["122"],"import React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { myFavorites, FavoriteBook } from \"../../api/index\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport queryString from \"query-string\";\nimport Alert from \"react-s-alert\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\nexport const FavoriteBookComponent = () => {\n  const dispatch = useDispatch();\n  const [books, setBooks] = useState([]);\n  const [isLoad, setLoad] = useState(false);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 5,\n  });\n  const userId = localStorage.getItem(\"_id\");\n  const user = useSelector((state) => {\n    return state.login.data;\n  });\n  const formSignIn = useSelector((state) => {\n    return state.formLoginStatus.data;\n  });\n  const getBookByUser = async () => {\n    try {\n      if (userId === null) {\n        dispatch({ type: \"FORM_LOGIN_STATUS\", payload: true });\n      } else {\n        const paramsString = queryString.stringify(pagination);\n        const response = await myFavorites(user._id, paramsString);\n        setBooks(response.data.data);\n      }\n    } catch (error) {\n      return Alert.error(\n        `<div role=\"alert\"><i class=\"fa fa-times-circle\" aria-hidden=\"true\"></i>\n         ${error.response.data.message}</div>`,\n        {\n          html: true,\n          position: \"top-right\",\n          effect: \"slide\",\n        }\n      );\n    }\n  };\n  useEffect(() => {\n    getBookByUser();\n  }, [pagination, isLoad, formSignIn]);\n  const removeFavorites = async (id) => {\n    await FavoriteBook({\n      bookId: id,\n      userId: userId,\n    });\n    setLoad(!isLoad);\n  };\n  const loadMore = () => {\n    setPagination({ ...pagination, limit: pagination.limit + 5 });\n  };\n  return (\n    <div style={{ marginBottom: \"20%\" }}>\n      <Alert stack={{ limit: 3 }} />\n      <div className=\"page section-header text-center\">\n        <div className=\"page-title\">\n          <div className=\"wrapper\">\n            <h1 className=\"page-width\">Favorite List</h1>\n          </div>\n        </div>\n      </div>\n      {/*End Page Title*/}\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-12 main-col\">\n            <div className=\"table-content table-responsive\">\n              <table className=\"table table-bordered\">\n                <thead>\n                  <tr>\n                    <th className=\"product-name text-center alt-font\">\n                      Remove\n                    </th>\n                    <th className=\"product-price text-center alt-font\">\n                      Images\n                    </th>\n                    <th className=\"product-name alt-font\">Book Name</th>\n                    <th className=\"product-price text-center alt-font\">\n                      Price: eCoins\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {books.map((book) => (\n                    <tr>\n                      <td\n                        className=\"product-remove text-center\"\n                        valign=\"middle\"\n                      >\n                        <button\n                          className=\"btn btn-danger\"\n                          onClick={() => {\n                            removeFavorites(book._id);\n                          }}\n                        >\n                          <i className=\"icon icon anm anm-times-l\" />\n                        </button>\n                      </td>\n                      <td className=\"product-thumbnail text-center\">\n                        <NavLink to={`books/${book._id}`}>\n                          <img\n                            src={book.images}\n                            alt=\"\"\n                            title\n                            style={{ height: 60, width: 60 }}\n                          />\n                        </NavLink>\n                      </td>\n                      <td\n                        className=\"product-name\"\n                        style={{ height: 100, width: 400 }}\n                      >\n                        <p className=\"no-margin\">\n                          <NavLink to={`books/${book._id}`}>\n                            {book.book_name}\n                          </NavLink>\n                        </p>\n                      </td>\n                      <td className=\"product-price text-center\">\n                        <span className=\"amount\">{book.price}</span>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <button\n              className=\"btn btn-dark\"\n              onClick={() => {\n                loadMore();\n              }}\n            >\n              Load More\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/phanhoang/Documents/Project/client/src/utils/paypal.js",[],"/Users/phanhoang/Documents/Project/client/src/reducers/formLogin.js",[],"/Users/phanhoang/Documents/Project/client/src/component/myLibrary/myLibrary.js",["123","124"],"import React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport { Image, Button } from \"react-bootstrap\";\nimport { myBooks, myBooksStatus, FavoriteBook } from \"../../api/index\";\nimport queryString from \"query-string\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport { faHeart as fasHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport moment from \"moment\";\nimport { useDispatch } from \"react-redux\";\nexport const MyLibrary = () => {\n  const dispatch = useDispatch();\n  const [books, setBooks] = useState([]);\n  const [isLoad, setLoad] = useState(false);\n  const [booksCanRead, setBooksCanRead] = useState([]);\n  const [booksExpired, setBooksExpired] = useState([]);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 8,\n  });\n  const [paginationStatus, setPaginationStatus] = useState({\n    page: 1,\n    limit: 8,\n    status: true,\n  });\n  const getBooks = async () => {\n    try {\n      const paginationString = queryString.stringify(pagination);\n      const response = await myBooks(\n        localStorage.getItem(\"_id\"),\n        paginationString\n      );\n      setBooks(response.data.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getBooks();\n  }, [pagination, isLoad]);\n  const getBooksStatus = async () => {\n    try {\n      const paginationString = queryString.stringify(paginationStatus);\n      const response = await myBooksStatus(\n        localStorage.getItem(\"_id\"),\n        paginationString\n      );\n      if (paginationStatus.status === true) {\n        setBooksCanRead(response.data.data);\n      } else {\n        setBooksExpired(response.data.data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getBooksStatus();\n  }, [paginationStatus]);\n  const getBookCanRead = async () => {\n    setPaginationStatus(paginationStatus);\n  };\n  const getBooksExpired = async () => {\n    setPaginationStatus({ ...paginationStatus, status: false });\n  };\n  const addToMyFavorite = async (id) => {\n    if (localStorage.getItem(\"_id\") === null) {\n      dispatch({ type: \"FORM_LOGIN_STATUS\", payload: true });\n    } else {\n      await FavoriteBook({\n        bookId: id,\n        userId: localStorage.getItem(\"_id\"),\n      });\n      setLoad(!isLoad);\n    }\n  };\n  return (\n    <div className=\"container\" style={{ marginBottom: \"30%\", marginTop: \"3%\" }}>\n      <Tabs>\n        <TabList>\n          <Tab>Total</Tab>\n          <Tab\n            onClick={() => {\n              getBookCanRead();\n            }}\n          >\n            Can Read\n          </Tab>\n          <Tab\n            onClick={() => {\n              getBooksExpired();\n            }}\n          >\n            Expired\n          </Tab>\n        </TabList>\n        <TabPanel>\n          <div className=\"row\">\n            {books.map((item) => (\n              <div\n                className=\"col-6 col-sm-2 col-md-3 col-lg-3 item\"\n                key={item._id}\n                style={{ marginBottom: 3, marginTop: 3 }}\n              >\n                {/* start product image */}\n\n                <div className=\"product-image\">\n                  {/* start product image */}\n\n                  <div className=\"grid-view-item__link\">\n                    <Image\n                      style={{ width: 400, height: 300 }}\n                      className=\"lazyload\"\n                      data-src={item.bookId.images}\n                      src={item.bookId.images}\n                      alt=\"image\"\n                      title={item.bookId.description}\n                    />\n                  </div>\n                  <div className=\"button-set\">\n                    <div className=\"wishlist-btn\">\n                      <button\n                        className=\"btn wishlist add-to-wishlist\"\n                        onClick={() => addToMyFavorite(item.bookId._id)}\n                      >\n                        <FontAwesomeIcon\n                          icon={\n                            item.bookId.userFavorite.some(\n                              (userId) => userId._id === localStorage.userId\n                            )\n                              ? fasHeart\n                              : faHeart\n                          }\n                          color={\n                            item.bookId.userFavorite.some(\n                              (userId) => userId === item.userId\n                            )\n                              ? \"#ed8a8a\"\n                              : \"#ececec\"\n                          }\n                        />\n                      </button>\n                    </div>\n                  </div>\n                  {/* end product button */}\n                </div>\n                {/* end product image */}\n                {/*start product details */}\n                <div className=\"product-details text-center\">\n                  {/* product name */}\n                  <NavLink to={`books/${item.bookId._id}`}>\n                    <div\n                      // className=\"product-name\"\n                      style={{\n                        height: 50,\n                        overflow: \"hidden\",\n                        textOverflow: \"ellipsis\",\n                      }}\n                    >\n                      {item.bookId.book_name}\n                    </div>\n                  </NavLink>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Total Date: {item.totalDate} Day\n                    </span>\n                  </div>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Total Price: {item.price} eCoins\n                    </span>\n                  </div>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Started At:{\" \"}\n                      {moment(item.startedAt).format(\"YYYY-MM-DD HH:MM\")}\n                    </span>\n                  </div>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Started At:{\" \"}\n                      {moment(item.endAt).format(\"YYYY-MM-DD HH:MM\")}\n                    </span>\n                  </div>\n                  {item.status === true ? (\n                    <NavLink to={`/books/read/${item._id}`}>\n                      <button\n                        className=\"btn btn-success btn-addto-cart\"\n                        type=\"button\"\n                        style={{ marginTop: 3 }}\n                        tabIndex={0}\n                      >\n                        Read\n                      </button>\n                    </NavLink>\n                  ) : (\n                    <Button\n                      className=\"btn btn-danger\"\n                      disabled\n                      style={{ marginTop: 3 }}\n                    >\n                      Expired\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))}\n            <Button\n              variant=\"dark\"\n              style={{ marginTop: 100, marginLeft: \"45%\", marginRight: \"45%\" }}\n              onClick={() => {\n                setPagination({ ...pagination, limit: pagination.limit + 4 });\n              }}\n            >\n              Load More\n            </Button>\n          </div>\n        </TabPanel>\n        <TabPanel>\n          <div className=\"row\">\n            {booksCanRead.map((item) => (\n              <div\n                className=\"col-6 col-sm-2 col-md-3 col-lg-3 item\"\n                key={item._id}\n                style={{ marginBottom: 3, marginTop: 3 }}\n              >\n                {/* start product image */}\n\n                <div className=\"product-image\">\n                  {/* start product image */}\n\n                  <div className=\"grid-view-item__link\">\n                    <Image\n                      style={{ width: 400, height: 300 }}\n                      className=\"lazyload\"\n                      data-src={item.bookId.images}\n                      src={item.bookId.images}\n                      alt=\"image\"\n                      title={item.bookId.description}\n                    />\n                  </div>\n                  <div className=\"button-set\">\n                    <div className=\"wishlist-btn\">\n                      <button\n                        className=\"btn wishlist add-to-wishlist\"\n                        onClick={() => addToMyFavorite(item._id)}\n                      >\n                        <FontAwesomeIcon\n                          icon={\n                            item.bookId.userFavorite.some(\n                              (userId) => userId._id === localStorage.userId\n                            )\n                              ? fasHeart\n                              : faHeart\n                          }\n                          color={\n                            item.bookId.userFavorite.some(\n                              (userId) => userId === item.userId\n                            )\n                              ? \"#ed8a8a\"\n                              : \"#ececec\"\n                          }\n                        />\n                      </button>\n                    </div>\n                  </div>\n                  {/* end product button */}\n                </div>\n                {/* end product image */}\n                {/*start product details */}\n                <div className=\"product-details text-center\">\n                  {/* product name */}\n                  <NavLink to={`books/${item.bookId._id}`}>\n                    <div\n                      // className=\"product-name\"\n                      style={{\n                        height: 50,\n                        overflow: \"hidden\",\n                        textOverflow: \"ellipsis\",\n                      }}\n                    >\n                      {item.bookId.book_name}\n                    </div>\n                  </NavLink>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Total Date: {item.totalDate} Day\n                    </span>\n                  </div>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Total Price: {item.price} eCoins\n                    </span>\n                  </div>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Started At:{\" \"}\n                      {moment(item.startedAt).format(\"YYYY-MM-DD HH:MM\")}\n                    </span>\n                  </div>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Started At:{\" \"}\n                      {moment(item.endAt).format(\"YYYY-MM-DD HH:MM\")}\n                    </span>\n                  </div>\n                  <NavLink to={`/books/read/${item._id}`}>\n                    <button\n                      className=\"btn btn-success btn-addto-cart\"\n                      type=\"button\"\n                      style={{ marginTop: 3 }}\n                      tabIndex={0}\n                    >\n                      Read\n                    </button>\n                  </NavLink>\n                </div>\n              </div>\n            ))}\n            <Button\n              variant=\"dark\"\n              style={{ marginTop: 100, marginLeft: \"45%\", marginRight: \"45%\" }}\n              onClick={() => {\n                setPaginationStatus({\n                  ...paginationStatus,\n                  limit: paginationStatus.limit + 4,\n                });\n              }}\n            >\n              Load More\n            </Button>\n          </div>\n        </TabPanel>\n        <TabPanel>\n          <div className=\"row\">\n            {booksExpired.map((item) => (\n              <div\n                className=\"col-6 col-sm-2 col-md-3 col-lg-3 item\"\n                key={item._id}\n                style={{ marginBottom: 3, marginTop: 3 }}\n              >\n                {/* start product image */}\n\n                <div className=\"product-image\">\n                  {/* start product image */}\n\n                  <div className=\"grid-view-item__link\">\n                    <Image\n                      style={{ width: 400, height: 300 }}\n                      className=\"lazyload\"\n                      data-src={item.bookId.images}\n                      src={item.bookId.images}\n                      alt=\"image\"\n                      title={item.bookId.description}\n                    />\n                  </div>\n                  <div className=\"button-set\">\n                    <div className=\"wishlist-btn\">\n                      <button\n                        className=\"btn wishlist add-to-wishlist\"\n                        onClick={() => addToMyFavorite(item._id)}\n                      >\n                        <FontAwesomeIcon\n                          icon={\n                            item.bookId.userFavorite.some(\n                              (userId) => userId._id === localStorage.userId\n                            )\n                              ? fasHeart\n                              : faHeart\n                          }\n                          color={\n                            item.bookId.userFavorite.some(\n                              (userId) => userId === item.userId\n                            )\n                              ? \"#ed8a8a\"\n                              : \"#ececec\"\n                          }\n                        />\n                      </button>\n                    </div>\n                  </div>\n                  {/* end product button */}\n                </div>\n                {/* end product image */}\n                {/*start product details */}\n                <div className=\"product-details text-center\">\n                  {/* product name */}\n                  <NavLink to={`books/${item.bookId._id}`}>\n                    <div\n                      // className=\"product-name\"\n                      style={{\n                        height: 50,\n                        overflow: \"hidden\",\n                        textOverflow: \"ellipsis\",\n                      }}\n                    >\n                      {item.bookId.book_name}\n                    </div>\n                  </NavLink>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Total Date: {item.totalDate} Day\n                    </span>\n                  </div>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Total Price: {item.price} eCoins\n                    </span>\n                  </div>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Started At:{\" \"}\n                      {moment(item.startedAt).format(\"YYYY-MM-DD HH:MM\")}\n                    </span>\n                  </div>\n                  <div className=\"product-price\">\n                    <span className=\"price\">\n                      Started At:{\" \"}\n                      {moment(item.endAt).format(\"YYYY-MM-DD HH:MM\")}\n                    </span>\n                  </div>\n                  <Button\n                    className=\"btn btn-danger\"\n                    disabled\n                    style={{ marginTop: 3 }}\n                  >\n                    Expired\n                  </Button>\n                </div>\n              </div>\n            ))}\n            <Button\n              variant=\"dark\"\n              style={{ marginTop: 100, marginLeft: \"45%\", marginRight: \"45%\" }}\n              onClick={() => {\n                setPaginationStatus({\n                  ...paginationStatus,\n                  limit: paginationStatus.limit + 4,\n                });\n              }}\n            >\n              Load More\n            </Button>\n          </div>\n        </TabPanel>\n      </Tabs>\n    </div>\n  );\n};\n","/Users/phanhoang/Documents/Project/client/src/component/book/book.read.js",[],"/Users/phanhoang/Documents/Project/client/src/component/me/updateMe.js",[],"/Users/phanhoang/Documents/Project/client/src/component/me/addCoins.history.js",["125"],"import React, { useState, useEffect } from \"react\";\nimport { PaymentHistory } from \"../../api/index\";\nimport queryString from \"query-string\";\nimport moment from \"moment\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nexport const AddCoinsHistory = () => {\n  const [history, setHistory] = useState([]);\n  const [pagination, setPagination] = useState({\n    limit: 5,\n    page: 1,\n  });\n  const getData = async () => {\n    try {\n      const paramsString = queryString.stringify(pagination);\n      const response = await PaymentHistory(paramsString);\n      setHistory(response.data.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getData();\n  }, [pagination]);\n  const user = useSelector((state) => {\n    return state.login.data;\n  });\n  if (!user._id) {\n    return <Redirect to=\"/\" />;\n  }\n  return (\n    <div style={{ marginBottom: \"20%\" }}>\n      <div className=\"page section-header text-center\">\n        <div className=\"page-title\">\n          <div className=\"wrapper\">\n            <h1 className=\"page-width\"> Coin deposit history</h1>\n          </div>\n        </div>\n      </div>\n      {/*End Page Title*/}\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-12 main-col\">\n            <div className=\"table-content table-responsive\">\n              <table className=\"table \">\n                <thead>\n                  <tr>\n                    <th className=\"product-price text-center alt-font\">\n                      Payment ID\n                    </th>\n                    <th className=\"product-name alt-font\">Amount</th>\n                    <th className=\"product-price text-center alt-font\">\n                      Currency\n                    </th>\n                    <th className=\"product-price text-center alt-font\">\n                      Payee Email\n                    </th>\n                    <th className=\"product-price text-center alt-font\">\n                      Payment At\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {history.map((item) => (\n                    <tr key={item._id}>\n                      <td\n                        className=\"product-remove text-center\"\n                        valign=\"middle\"\n                      >\n                        {item.paymentId}\n                      </td>\n                      <td className=\"product-thumbnail text-center\">\n                        {item.amount}\n                      </td>\n                      <td className=\"product-name\">{item.currency}</td>\n                      <td className=\"product-price text-center\">\n                        {item.payeeEmail}\n                      </td>\n                      <td className=\"product-price text-center\">\n                        {moment(item.createdAt).format(\"YYYY-MM-DD HH:MM\")}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <button\n              className=\"btn btn-dark\"\n              onClick={() => {\n                setPagination({ ...pagination, limit: pagination.limit + 5 });\n              }}\n            >\n              Load More\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/phanhoang/Documents/Project/client/src/component/privacy/index.js",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":54,"column":6,"nodeType":"132","endLine":54,"endColumn":32,"suggestions":"133"},{"ruleId":"130","severity":1,"message":"134","line":33,"column":6,"nodeType":"132","endLine":33,"endColumn":18,"suggestions":"135"},{"ruleId":"130","severity":1,"message":"136","line":75,"column":6,"nodeType":"132","endLine":75,"endColumn":35,"suggestions":"137"},{"ruleId":"130","severity":1,"message":"138","line":47,"column":6,"nodeType":"132","endLine":47,"endColumn":38,"suggestions":"139"},{"ruleId":"130","severity":1,"message":"140","line":41,"column":6,"nodeType":"132","endLine":41,"endColumn":26,"suggestions":"141"},{"ruleId":"130","severity":1,"message":"142","line":60,"column":6,"nodeType":"132","endLine":60,"endColumn":24,"suggestions":"143"},{"ruleId":"130","severity":1,"message":"131","line":24,"column":6,"nodeType":"132","endLine":24,"endColumn":18,"suggestions":"144"},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["147"],"React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'getReviews'. Either include it or remove the dependency array.",["149"],"React Hook useEffect has a missing dependency: 'getBookByUser'. Either include it or remove the dependency array.",["150"],"React Hook useEffect has a missing dependency: 'getBooks'. Either include it or remove the dependency array.",["151"],"React Hook useEffect has a missing dependency: 'getBooksStatus'. Either include it or remove the dependency array.",["152"],["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},"Update the dependencies array to be: [props.pagination, isLoad, getData]",{"range":"168","text":"169"},"Update the dependencies array to be: [pagination, search]",{"range":"170","text":"171"},"Update the dependencies array to be: [showWriteReview, reviewPage, getReviews]",{"range":"172","text":"173"},"Update the dependencies array to be: [pagination, isLoad, formSignIn, getBookByUser]",{"range":"174","text":"175"},"Update the dependencies array to be: [pagination, isLoad, getBooks]",{"range":"176","text":"177"},"Update the dependencies array to be: [getBooksStatus, paginationStatus]",{"range":"178","text":"179"},"Update the dependencies array to be: [getData, pagination]",{"range":"180","text":"181"},[1865,1891],"[props.pagination, isLoad, getData]",[1045,1057],"[pagination, search]",[2497,2526],"[showWriteReview, reviewPage, getReviews]",[1535,1567],"[pagination, isLoad, formSignIn, getBookByUser]",[1404,1424],"[pagination, isLoad, getBooks]",[1928,1946],"[getBooksStatus, paginationStatus]",[726,738],"[getData, pagination]"]