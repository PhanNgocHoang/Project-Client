[{"/Users/phanhoang/Documents/Project/client/src/index.js":"1","/Users/phanhoang/Documents/Project/client/src/App.js":"2","/Users/phanhoang/Documents/Project/client/src/reportWebVitals.js":"3","/Users/phanhoang/Documents/Project/client/src/pages/Home.js":"4","/Users/phanhoang/Documents/Project/client/src/component/router.js":"5","/Users/phanhoang/Documents/Project/client/src/component/book/listBook.js":"6","/Users/phanhoang/Documents/Project/client/src/pages/Library.js":"7","/Users/phanhoang/Documents/Project/client/src/api/index.js":"8","/Users/phanhoang/Documents/Project/client/src/component/header/header.js":"9","/Users/phanhoang/Documents/Project/client/src/component/footer/footer.js":"10","/Users/phanhoang/Documents/Project/client/src/component/book/search.js":"11","/Users/phanhoang/Documents/Project/client/src/reducers/index.js":"12","/Users/phanhoang/Documents/Project/client/src/reducers/login.reducer.js":"13","/Users/phanhoang/Documents/Project/client/src/constants/index.js":"14","/Users/phanhoang/Documents/Project/client/src/hooks/useAuth.js":"15","/Users/phanhoang/Documents/Project/client/src/reducers/newbook.reducer.js":"16","/Users/phanhoang/Documents/Project/client/src/component/book/book_details.js":"17","/Users/phanhoang/Documents/Project/client/src/component/header/slide.js":"18","/Users/phanhoang/Documents/Project/client/src/reducers/review.reducer.js":"19","/Users/phanhoang/Documents/Project/client/src/component/book/book_favorite.js":"20","/Users/phanhoang/Documents/Project/client/src/utils/paypal.js":"21","/Users/phanhoang/Documents/Project/client/src/reducers/formLogin.js":"22","/Users/phanhoang/Documents/Project/client/src/component/myLibrary/myLibrary.js":"23"},{"size":754,"mtime":1612274438131,"results":"24","hashOfConfig":"25"},{"size":525,"mtime":1614580273993,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1612166816275,"results":"27","hashOfConfig":"25"},{"size":1276,"mtime":1614176977133,"results":"28","hashOfConfig":"25"},{"size":689,"mtime":1614668538923,"results":"29","hashOfConfig":"25"},{"size":4298,"mtime":1614696211568,"results":"30","hashOfConfig":"25"},{"size":8259,"mtime":1614675724603,"results":"31","hashOfConfig":"25"},{"size":3058,"mtime":1614680126971,"results":"32","hashOfConfig":"25"},{"size":30250,"mtime":1614668572992,"results":"33","hashOfConfig":"25"},{"size":2809,"mtime":1614219045988,"results":"34","hashOfConfig":"25"},{"size":2706,"mtime":1614582080166,"results":"35","hashOfConfig":"25"},{"size":308,"mtime":1614580633314,"results":"36","hashOfConfig":"25"},{"size":312,"mtime":1614580603605,"results":"37","hashOfConfig":"25"},{"size":220,"mtime":1614580415076,"results":"38","hashOfConfig":"25"},{"size":771,"mtime":1614483006566,"results":"39","hashOfConfig":"25"},{"size":309,"mtime":1613364752389,"results":"40","hashOfConfig":"25"},{"size":18599,"mtime":1614613011212,"results":"41","hashOfConfig":"25"},{"size":1281,"mtime":1614582271430,"results":"42","hashOfConfig":"25"},{"size":312,"mtime":1614217545655,"results":"43","hashOfConfig":"25"},{"size":4877,"mtime":1614694701242,"results":"44","hashOfConfig":"25"},{"size":2672,"mtime":1614519927783,"results":"45","hashOfConfig":"25"},{"size":326,"mtime":1614580726820,"results":"46","hashOfConfig":"25"},{"size":11961,"mtime":1614696294827,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1qfk95l",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/phanhoang/Documents/Project/client/src/index.js",[],["98","99"],"/Users/phanhoang/Documents/Project/client/src/App.js",[],"/Users/phanhoang/Documents/Project/client/src/reportWebVitals.js",[],"/Users/phanhoang/Documents/Project/client/src/pages/Home.js",[],"/Users/phanhoang/Documents/Project/client/src/component/router.js",[],"/Users/phanhoang/Documents/Project/client/src/component/book/listBook.js",["100"],"/Users/phanhoang/Documents/Project/client/src/pages/Library.js",[],"/Users/phanhoang/Documents/Project/client/src/api/index.js",[],"/Users/phanhoang/Documents/Project/client/src/component/header/header.js",["101","102","103","104"],"import React, { useState } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Modal,\n  Button,\n  Form,\n  Col,\n  CardGroup,\n  OverlayTrigger,\n  Popover,\n  ListGroup,\n  Image,\n} from \"react-bootstrap\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport Alert from \"react-s-alert\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\nimport FacebookLogin from \"react-facebook-login\";\nimport GoogleLogin from \"react-google-login\";\nimport {\n  checkLogin,\n  uploadAvatar,\n  register,\n  loginWithGoogle,\n  loginWithFacebook,\n  addCoins,\n} from \"../../api/index.js\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport PayPal from \"../../utils/paypal\";\nconst validationSchema = yup.object().shape({\n  email: yup.string().email(\"Email invalid\").required(\"Email is required\"),\n  password: yup\n    .string()\n    .min(6, \"Password is less than 6 characters\")\n    .required(\"Password is required\"),\n});\nconst validationSchemaRegister = yup.object().shape({\n  email: yup.string().email(\"Email invalid\").required(\"Email is required\"),\n  name: yup.string().required(\"Name is required\"),\n  password: yup\n    .string()\n    .min(6, \"Password is less than 6 characters\")\n    .required(\"Password is required\"),\n  c_password: yup\n    .string()\n    .min(6, \"Confirm Password is less than 6 characters\")\n    .required(\"Confirm Password is required\")\n    .oneOf([yup.ref(\"password\")], \"Confirm password not match with password\"),\n  dob: yup.date().required(\"Day of birth is required\"),\n  photoUrl: yup.string().required(\"Please choose a avatar\"),\n});\nconst validationMoneySchema = yup.object().shape({\n  money: yup\n    .number(\"Your money is not valid. Example: 1.1\")\n    .min(1, \"Minimum amount is 1 dollar\")\n    .required(\"Please enter a number money\"),\n});\nexport const Header = () => {\n  useAuth();\n  const history = useHistory();\n  const [formAddCoins, setFormAddCoins] = useState(false);\n  const dispatch = useDispatch();\n  const initialMoney = {\n    money: 0,\n  };\n  const initialValues = {\n    email: \"\",\n    password: \"\",\n  };\n  const initialValuesRegister = {\n    email: \"\",\n    name: \"\",\n    password: \"\",\n    // c_password: \"\",\n    dob: \"\",\n    photoUrl: \"\",\n  };\n  const [numberMoney, setNumberMoney] = useState(0);\n  const signInScreenStatus = useSelector((state) => {\n    return state.formLoginStatus;\n  });\n  const [signUpScreen, setSigUpScreen] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState(false);\n  const user = useSelector((state) => {\n    return state.login.data;\n  });\n  const [userWallet, setUserWallet] = useState(user.wallet);\n  const closeSignIn = () => {\n    dispatch({ type: \"FORM_LOGIN_STATUS\", payload: false });\n  };\n\n  const closeSignUp = async function () {\n    setSigUpScreen(false);\n  };\n  const uploadMyAvatar = async (file) => {\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    const result = await uploadAvatar(formData);\n    initialValuesRegister.photoUrl = result.data.url;\n  };\n  const logOut = async () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"_id\");\n    window.location.href = \"/\";\n  };\n  const responseGoogle = async (response) => {\n    try {\n      const result = await loginWithGoogle({\n        access_token: response.accessToken,\n      });\n      if (result.status === 200) {\n        localStorage.setItem(\"token\", result.data.token);\n        dispatch({ type: \"DATA_LOGIN\", payload: result.data.user });\n        localStorage.setItem(\"_id\", result.data.user._id);\n        dispatch({ type: \"FORM_LOGIN_STATUS\", payload: false });\n        Alert.success(`<div role=\"alert\"> Sign In Successfully </div>`, {\n          html: true,\n          position: \"top-right\",\n          effect: \"slide\",\n        });\n        return history.push();\n      }\n    } catch (error) {\n      return Alert.error(\n        `<div role=\"alert\">${error.response.data.message}</div>`,\n        {\n          html: true,\n          position: \"top-right\",\n          effect: \"slide\",\n        }\n      );\n    }\n  };\n  const responseFacebook = async (response) => {\n    try {\n      const result = await loginWithFacebook({\n        access_token: response.accessToken,\n        user_id: response.id,\n      });\n      if (result.status === 200) {\n        localStorage.setItem(\"token\", result.data.token);\n        localStorage.setItem(\"_id\", result.data.user._id);\n        dispatch({ type: \"DATA_LOGIN\", payload: result.data.user });\n        dispatch({ type: \"FORM_LOGIN_STATUS\", payload: false });\n        Alert.success(`<div role=\"alert\"> Sign In Successfully </div>`, {\n          html: true,\n          position: \"top-right\",\n          effect: \"slide\",\n        });\n        return history.push();\n      }\n    } catch (error) {\n      return Alert.error(\n        `<div role=\"alert\">${error.response.data.message}</div>`,\n        {\n          html: true,\n          position: \"top-right\",\n          effect: \"slide\",\n        }\n      );\n    }\n  };\n  const transactionSuccess = async (data) => {\n    try {\n      const response = await addCoins({\n        paymentId: data.paymentID,\n        userId: user._id,\n      });\n      setPaymentMethod(false);\n      document.getElementById(\"user\").click();\n      return Alert.success(\n        `<div role=\"alert\"> ${response.data.message} </div>`,\n        {\n          html: true,\n          position: \"top-right\",\n          effect: \"slide\",\n        }\n      );\n    } catch (error) {\n      return Alert.error(\n        `<div role=\"alert\">${error.response.data.message}</div>`,\n        {\n          html: true,\n          position: \"top-right\",\n          effect: \"slide\",\n        }\n      );\n    }\n  };\n  const transactionError = (err) => {\n    return Alert.error(`<div role=\"alert\">${err.message}</div>`, {\n      html: true,\n      position: \"top-right\",\n      effect: \"slide\",\n    });\n  };\n  const transactionCanceled = () => {\n    return Alert.success(\n      `<div role=\"alert\">Transaction called successfully</div>`,\n      {\n        html: true,\n        position: \"top-right\",\n        effect: \"slide\",\n      }\n    );\n  };\n  return (\n    <div>\n      <Alert stack={{ limit: 3 }} />\n      {/* Header Area Start */}\n      <div className=\"header-wrap animated d-flex border-bottom\">\n        <div className=\"container-fluid\">\n          <div className=\"row align-items-center\">\n            {/*Desktop Logo*/}\n            <div className=\"logo col-md-2 col-lg-2 d-none d-lg-block\">\n              <NavLink to=\"/\">\n                <Image\n                  src=\"https://res.cloudinary.com/dps6fac1c/image/upload/v1613621648/images/e-library_uxmixc.png\"\n                  style={{ width: \"30%\", height: \"30%\" }}\n                />\n              </NavLink>\n            </div>\n            {/*End Desktop Logo*/}\n            <div className=\"col-2 col-sm-2 col-md-3 col-lg-7\">\n              <div className=\"d-block d-lg-none\">\n                <button\n                  type=\"button\"\n                  className=\"btn--link site-header__menu js-mobile-nav-toggle mobile-nav--open\"\n                >\n                  <i className=\"icon anm anm-times-l\" />\n                  <i className=\"anm anm-bars-r\" />\n                </button>\n              </div>\n              {/*Desktop Menu*/}\n              <nav className=\"grid__item\" id=\"AccessibleNav\">\n                {/* for mobile */}\n                <ul id=\"siteNav\" className=\"site-nav medium center hidearrow\">\n                  <li className=\"lvl1 parent megamenu\">\n                    <NavLink to=\"/\">Home</NavLink>\n                  </li>\n                  <li className=\"lvl1 parent megamenu\">\n                    <NavLink to=\"/library\">Library</NavLink>\n                  </li>\n                  <li className=\"lvl1 parent megamenu\">\n                    <NavLink to=\"/favorite\">Favorite</NavLink>\n                  </li>\n                  {user.email ? null : (\n                    <li\n                      className=\"lvl1 parent megamenu\"\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <NavLink\n                        to=\"#\"\n                        onClick={() => {\n                          dispatch({\n                            type: \"FORM_LOGIN_STATUS\",\n                            payload: true,\n                          });\n                        }}\n                      >\n                        Sign In\n                      </NavLink>\n                    </li>\n                  )}\n                  {user.email ? null : (\n                    <li\n                      className=\"lvl1 parent megamenu\"\n                      style={{ cursor: \"pointer\" }}\n                    >\n                      <a onClick={() => setSigUpScreen(true)}>Sign Up</a>\n                    </li>\n                  )}\n                </ul>\n              </nav>\n              {/*End Desktop Menu*/}\n            </div>\n            {/*Mobile Logo*/}\n            <div className=\"col-6 col-sm-6 col-md-5 col-lg-1 d-block d-lg-none mobile-logo\">\n              <div className=\"logo\">\n                <NavLink to=\"/\">\n                  <Image\n                    src=\"https://res.cloudinary.com/dps6fac1c/image/upload/v1613621648/images/e-library_uxmixc.png\"\n                    style={{ width: \"50%\", height: \"50%\" }}\n                  />\n                </NavLink>\n              </div>\n            </div>\n            {/*Mobile Logo*/}\n            <div className=\"col-4 col-sm-4 col-md-4 col-lg-3\">\n              <div className=\"site-cart\">\n                {user.email ? (\n                  <OverlayTrigger\n                    placement=\"auto\"\n                    trigger=\"click\"\n                    overlay={\n                      <Popover>\n                        <Popover.Title as=\"h3\">\n                          {user.displayName}\n                        </Popover.Title>\n                        <Popover.Content>\n                          <ListGroup variant=\"flush\">\n                            <ListGroup.Item>\n                              <NavLink to=\"/me\">Update Profile</NavLink>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                              <NavLink to=\"/myLibrary\">My Library</NavLink>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                              My eCoins: {user.wallet}\n                            </ListGroup.Item>\n                            <ListGroup.Item\n                              style={{ cursor: \"pointer\" }}\n                              onClick={() => {\n                                document.getElementById(\"user\").click();\n                                setFormAddCoins(true);\n                              }}\n                            >\n                              Add eCoins\n                            </ListGroup.Item>\n                            <ListGroup.Item\n                              onClick={() => {\n                                logOut();\n                              }}\n                              style={{ cursor: \"pointer\" }}\n                            >\n                              LogOut\n                            </ListGroup.Item>\n                          </ListGroup>\n                        </Popover.Content>\n                      </Popover>\n                    }\n                  >\n                    <div id=\"userMobile\">\n                      <Image\n                        src={user.photoUrl}\n                        alt=\"\"\n                        className=\"border rounded-circle\"\n                        style={{\n                          width: 35,\n                          marginLeft: \"3%\",\n                          cursor: \"pointer\",\n                        }}\n                      />\n                    </div>\n                  </OverlayTrigger>\n                ) : null}\n              </div>\n              <div className=\"site-header__search\">\n                <button type=\"button\" className=\"search-trigger\">\n                  <i className=\"icon anm anm-search-l\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"mobile-nav-wrapper\" role=\"navigation\">\n        <div\n          className=\"closemobileMenu\"\n          onClick={() => {\n            document.getElementById(\"userMobile\").click();\n          }}\n        >\n          <i className=\"icon anm anm-times-l pull-right\" /> Close Menu\n        </div>\n        <ul id=\"MobileNav\" className=\"mobile-nav\">\n          {user.email ? null : (\n            <li className=\"lvl1 parent megamenu\" style={{ cursor: \"pointer\" }}>\n              <NavLink\n                to=\"#\"\n                onClick={() => {\n                  dispatch({\n                    type: \"FORM_LOGIN_STATUS\",\n                    payload: true,\n                  });\n                }}\n              >\n                Sign In\n              </NavLink>\n            </li>\n          )}\n          {user.email ? null : (\n            <li className=\"lvl1 parent megamenu\" style={{ cursor: \"pointer\" }}>\n              <a onClick={() => setSigUpScreen(true)}>Sign Up</a>\n            </li>\n          )}\n          <li className=\"lvl1 parent megamenu\">\n            <NavLink to=\"/\">Home</NavLink>\n          </li>\n          <li className=\"lvl1 parent megamenu\">\n            <NavLink to=\"/library\">Library</NavLink>\n          </li>\n          <li className=\"lvl1 parent megamenu\">\n            <NavLink to=\"/favorite\">Favorite</NavLink>\n          </li>\n        </ul>\n      </div>\n\n      <Modal\n        show={signInScreenStatus.data}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        onHide={closeSignIn}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">Sign In</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Formik\n            initialValues={initialValues}\n            onSubmit={async (values) => {\n              try {\n                const result = await checkLogin(values);\n                if (result.status === 200) {\n                  localStorage.setItem(\"token\", result.data.token);\n                  localStorage.setItem(\"_id\", result.data.user._id);\n                  dispatch({ type: \"DATA_LOGIN\", payload: result.data.user });\n                  Alert.success(\n                    `<div role=\"alert\"> Sign In Successfully </div>`,\n                    {\n                      html: true,\n                      position: \"top-right\",\n                      effect: \"slide\",\n                    }\n                  );\n                  return history.push();\n                }\n              } catch (error) {\n                return Alert.error(\n                  `<div role=\"alert\">${error.response.data.message}</div>`,\n                  {\n                    html: true,\n                    position: \"top-right\",\n                    effect: \"slide\",\n                  }\n                );\n              }\n            }}\n            validationSchema={validationSchema}\n          >\n            {(props) => (\n              <Form className=\"form-horizontal\" onSubmit={props.handleSubmit}>\n                <Form.Group className=\"ml-3\">\n                  <Form.Row>\n                    <Form.Label column lg={3.5}>\n                      Email\n                    </Form.Label>\n                    <Col>\n                      <Form.Control\n                        lg={4}\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        style={{ width: \"60%\" }}\n                        placeholder=\"Enter your email\"\n                        className=\"ml-5\"\n                        onChange={props.handleChange}\n                        onBlur={props.handleBlur}\n                        isInvalid={props.touched.email && props.errors.email}\n                      />\n                      <Form.Control.Feedback type=\"invalid\">\n                        {props.touched.email && props.errors.email}\n                      </Form.Control.Feedback>\n                    </Col>\n                  </Form.Row>\n                </Form.Group>\n                <Form.Group className=\"ml-3\">\n                  <Form.Row>\n                    <Form.Label column lg={1.7}>\n                      Password\n                    </Form.Label>\n                    <Col>\n                      <Form.Control\n                        lg={4}\n                        type=\"password\"\n                        id=\"password\"\n                        name=\"password\"\n                        placeholder=\"Enter you password\"\n                        style={{ width: \"65%\" }}\n                        className=\"ml-3\"\n                        onChange={props.handleChange}\n                        onBlur={props.handleBlur}\n                        isInvalid={\n                          props.touched.password && props.errors.password\n                        }\n                      />\n                      <Form.Control.Feedback type=\"invalid\">\n                        {props.touched.password && props.errors.password}\n                      </Form.Control.Feedback>\n                    </Col>\n                  </Form.Row>\n                </Form.Group>\n                <Modal.Footer>\n                  <Button\n                    type=\"submit\"\n                    style={{ height: 47, width: 150, borderRadius: 4 }}\n                  >\n                    Sign in <i className=\"fa fa-sign-in\" aria-hidden=\"true\"></i>\n                  </Button>\n                  <GoogleLogin\n                    clientId=\"262517224867-kufcnkfvmehbscpl4q8tgvpd9sru5hpg.apps.googleusercontent.com\"\n                    buttonText=\"SignIn With Google\"\n                    onSuccess={responseGoogle}\n                    onFailure={responseGoogle}\n                    cookiePolicy={\"single_host_origin\"}\n                  />\n                  <FacebookLogin\n                    appId=\"322522312399138\"\n                    autoLoad={false}\n                    callback={responseFacebook}\n                  />\n                  ,\n                </Modal.Footer>\n              </Form>\n            )}\n          </Formik>\n        </Modal.Body>\n      </Modal>\n\n      <Modal\n        show={signUpScreen}\n        onHide={closeSignUp}\n        size=\"lg\"\n        centered\n        aria-labelledby=\"contained-modal-title-vcenter\"\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>Sign Up</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"card-body card-block\">\n            <Formik\n              initialValues={initialValuesRegister}\n              onSubmit={async (values) => {\n                try {\n                  values.role = \"USER\";\n                  values.displayName = values.name;\n                  const result = await register(values);\n                  if (result.status === 200) {\n                    setSigUpScreen(false);\n                    return Alert.success(\n                      `<div role=\"alert\">\n                                                 ${result.data.message}\n                                                </div>`,\n                      {\n                        html: true,\n                        position: \"top-right\",\n                        effect: \"slide\",\n                      }\n                    );\n                  }\n                } catch (error) {\n                  console.log(error);\n\n                  return Alert.error(\n                    `<div role=\"alert\">\n                                                ${error.response.data.message}\n                                                </div>`,\n                    {\n                      html: true,\n                      position: \"top-right\",\n                      effect: \"slide\",\n                    }\n                  );\n                }\n              }}\n              validationSchema={validationSchemaRegister}\n            >\n              {(props) => (\n                <Form\n                  className=\"form-horizontal ml-5\"\n                  onSubmit={props.handleSubmit}\n                >\n                  <Form.Group>\n                    <Form.Row>\n                      <Form.Label column lg={3.5}>\n                        Email\n                      </Form.Label>\n                      <Col>\n                        <Form.Control\n                          lg={4}\n                          type=\"email\"\n                          id=\"email\"\n                          name=\"email\"\n                          className=\"ml-5\"\n                          style={{ width: \"60%\" }}\n                          placeholder=\"Enter your email\"\n                          onChange={(event) => {\n                            initialValuesRegister.email = event.target.value;\n                          }}\n                          onBlur={props.handleBlur}\n                          isInvalid={props.touched.email && props.errors.email}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          {props.touched.email && props.errors.email}\n                        </Form.Control.Feedback>\n                      </Col>\n                    </Form.Row>\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Row>\n                      <Form.Label column lg={3.5}>\n                        Name\n                      </Form.Label>\n                      <Col>\n                        <Form.Control\n                          lg={4}\n                          type=\"name\"\n                          id=\"name\"\n                          name=\"name\"\n                          className=\"ml-5\"\n                          style={{ width: \"60%\" }}\n                          placeholder=\"Enter your name\"\n                          onChange={(event) => {\n                            initialValuesRegister.name = event.target.value;\n                          }}\n                          onBlur={props.handleBlur}\n                          isInvalid={props.touched.name && props.errors.name}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          {props.touched.name && props.errors.name}\n                        </Form.Control.Feedback>\n                      </Col>\n                    </Form.Row>\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Row>\n                      <Form.Label column lg={1.7}>\n                        Password\n                      </Form.Label>\n                      <Col>\n                        <Form.Control\n                          lg={4}\n                          type=\"password\"\n                          id=\"password\"\n                          name=\"password\"\n                          className=\"ml-3\"\n                          style={{ width: \"63%\" }}\n                          placeholder=\"Enter your password\"\n                          onChange={(event) => {\n                            initialValuesRegister.password = event.target.value;\n                          }}\n                          onBlur={props.handleBlur}\n                          isInvalid={\n                            props.touched.password && props.errors.password\n                          }\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          {props.touched.password && props.errors.password}\n                        </Form.Control.Feedback>\n                      </Col>\n                    </Form.Row>\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Row>\n                      <Form.Label column lg={3.5}>\n                        Confirm Password\n                      </Form.Label>\n                      <Col>\n                        <Form.Control\n                          lg={3}\n                          type=\"password\"\n                          id=\"c_password\"\n                          name=\"c_password\"\n                          style={{ width: \"63%\" }}\n                          placeholder=\"Enter confirm password\"\n                          onChange={(event) => {\n                            initialValuesRegister.c_password =\n                              event.target.value;\n                          }}\n                          onBlur={props.handleBlur}\n                          isInvalid={\n                            props.touched.c_password && props.errors.c_password\n                          }\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          {props.touched.c_password && props.errors.c_password}\n                        </Form.Control.Feedback>\n                      </Col>\n                    </Form.Row>\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Row>\n                      <Form.Label column lg={3.5}>\n                        Day Of Birth\n                      </Form.Label>\n                      <Col>\n                        <Form.Control\n                          lg={3}\n                          type=\"Date\"\n                          id=\"dob\"\n                          name=\"dob\"\n                          className=\"ml-3\"\n                          style={{ width: \"63%\" }}\n                          placeholder=\"Enter your day of birth\"\n                          onChange={(event) => {\n                            initialValuesRegister.dob = event.target.value;\n                          }}\n                          onBlur={props.handleBlur}\n                          isInvalid={props.touched.dob && props.errors.dob}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                          {props.touched.dob && props.errors.dob}\n                        </Form.Control.Feedback>\n                      </Col>\n                    </Form.Row>\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label>Avatar</Form.Label>\n                    <Form.File\n                      id=\"photoUrl\"\n                      name=\"photoUrl\"\n                      accept=\"image/png, image/jpeg\"\n                      onChange={(e) => {\n                        uploadMyAvatar(e.target.files[0]);\n                      }}\n                    />\n                    <CardGroup className=\"mt-3\">\n                      {/* {images.map((item) => (\n                        <Card style={{ width: \"18rem\" }} className=\"mb-3 ml-3\">\n                          <i\n                            className=\"fa fa-times-circle\"\n                            aria-hidden=\"true\"\n                            style={{ float: \"right\" }}\n                          ></i>\n                          <Card.Img\n                            variant=\"top\"\n                            src={item}\n                            style={{ width: \"100%\", height: \"100%\" }}\n                          />\n                        </Card>\n                      ))} */}\n                    </CardGroup>\n                  </Form.Group>\n                  <Modal.Footer>\n                    <Button variant=\"success\" type=\"submit\">\n                      Sign Up\n                      <i className=\"fa fa-user-plus\" aria-hidden=\"true\"></i>\n                    </Button>\n                  </Modal.Footer>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Modal.Body>\n      </Modal>\n      <Modal\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        show={formAddCoins}\n        onHide={() => {\n          setFormAddCoins(false);\n        }}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Add eCoins\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Formik\n            initialValues={initialMoney}\n            validationSchema={validationMoneySchema}\n            onSubmit={(value) => {\n              setFormAddCoins(false);\n              setPaymentMethod(true);\n              setNumberMoney(value.money);\n            }}\n          >\n            {(props) => (\n              <Form\n                onSubmit={props.handleSubmit}\n                id=\"new-review-form\"\n                className=\"new-review-form\"\n              >\n                <Form.Label column lg={3.5}>\n                  Amount of money: Unit $(USD)\n                </Form.Label>\n                <Form.Control\n                  lg={4}\n                  type=\"text\"\n                  name=\"money\"\n                  placeholder=\"Enter you money\"\n                  style={{ width: \"65%\" }}\n                  className=\"ml-3\"\n                  onChange={props.handleChange}\n                  onBlur={props.handleBlur}\n                  isInvalid={props.touched.money && props.errors.money}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {props.touched.money && props.errors.money}\n                </Form.Control.Feedback>\n                <Modal.Footer>\n                  <Button className=\"btn btn-primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            )}\n          </Formik>\n        </Modal.Body>\n      </Modal>\n      <Modal\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        show={paymentMethod}\n        onHide={() => {\n          setPaymentMethod(false);\n        }}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Add Method\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <PayPal\n            toPay={numberMoney}\n            onSuccess={transactionSuccess}\n            transactionError={transactionError}\n            transactionCanceled={transactionCanceled}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => {\n              setPaymentMethod(false);\n            }}\n          >\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n","/Users/phanhoang/Documents/Project/client/src/component/footer/footer.js",[],"/Users/phanhoang/Documents/Project/client/src/component/book/search.js",[],"/Users/phanhoang/Documents/Project/client/src/reducers/index.js",[],"/Users/phanhoang/Documents/Project/client/src/reducers/login.reducer.js",[],"/Users/phanhoang/Documents/Project/client/src/constants/index.js",[],"/Users/phanhoang/Documents/Project/client/src/hooks/useAuth.js",[],"/Users/phanhoang/Documents/Project/client/src/reducers/newbook.reducer.js",[],"/Users/phanhoang/Documents/Project/client/src/component/book/book_details.js",["105"],"import React, { useEffect, useState } from \"react\";\nimport { Formik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport { Form, Modal, Button } from \"react-bootstrap\";\nimport \"react-tabs/style/react-tabs.css\";\nimport * as yup from \"yup\";\nimport {\n  createReview,\n  getReview,\n  createOrder,\n  getBookDetails,\n  FavoriteBook,\n} from \"../../api/index\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport { faHeart as fasHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { NavLink } from \"react-router-dom\";\nimport Alert from \"react-s-alert\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\nimport moment from \"moment\";\nimport queryString from \"query-string\";\nconst validationSchema = yup.object().shape({\n  content: yup.string().required(\"Please enter your review\"),\n});\nconst orderValidationSchema = yup.object().shape({\n  totalDate: yup\n    .number()\n    .min(1, \"Please enter a day number\")\n    .required(\"Please enter a date number\"),\n});\nexport const BookDetails = (prop) => {\n  const dispatch = useDispatch();\n  const orderInitialValues = {\n    totalDate: 0,\n  };\n  const user = useSelector((state) => {\n    return state.login.data;\n  });\n  const [showWriteReview, setWriteReview] = useState(false);\n  const [reviews, setReview] = useState([]);\n  const initialValues = {\n    content: \"\",\n  };\n  const [reviewPage, setReviewPage] = useState({\n    page: 1,\n    limit: 5,\n  });\n  const bookId = prop.match.params.book_id;\n  const [bookDetail, setBookDetail] = useState({});\n  const [publisher, setPublisher] = useState({});\n  const [userFavorite, setUserFavorite] = useState([]);\n  const [isLoad, setLoad] = useState(false);\n  const getBook = async (bookId) => {\n    const book = await getBookDetails(bookId);\n    setBookDetail(book.data.data);\n    setPublisher(book.data.data.publisher);\n    setUserFavorite(book.data.data.userFavorite);\n  };\n  useEffect(() => {\n    getBook(bookId);\n  }, [bookId, reviews, isLoad]);\n  const getReviews = async () => {\n    const paramsString = queryString.stringify(reviewPage);\n    const result = await getReview(bookId, paramsString);\n    setReview(result.data.data);\n    dispatch({ type: \"BOOK_REVIEWS\", payload: result.data.data });\n  };\n  useEffect(() => {\n    getReviews();\n  }, [showWriteReview, reviewPage]);\n  const addToMyFavorite = async (id) => {\n    if (localStorage.getItem(\"_id\") === null) {\n      dispatch({ type: \"FORM_LOGIN_STATUS\", payload: true });\n    } else {\n      const response = await FavoriteBook({\n        bookId: bookDetail._id,\n        userId: user._id,\n      });\n      setBookDetail(response.data.result);\n      setPublisher(response.data.result.publisher);\n      setLoad(!isLoad);\n    }\n  };\n  return (\n    <div id=\"MainContent\" className=\"main-content\" role=\"main\">\n      <Alert stack={{ limit: 3 }} />\n      <div className=\"bredcrumbWrap\">\n        <div className=\"container breadcrumbs\">\n          <NavLink to=\"/library\">Books</NavLink>\n          <span aria-hidden=\"true\">›</span>\n          <span>{bookDetail.book_name}</span>\n        </div>\n      </div>\n      {/*End Breadcrumb*/}\n      <div\n        id=\"ProductSection-product-template\"\n        className=\"product-template__container prstyle2 container\"\n      >\n        {/*#ProductSection-product-template*/}\n        <div className=\"product-single product-single-1\">\n          <div className=\"row\">\n            <div className=\"col-lg-6 col-md-6 col-sm-12 col-12\">\n              <div className=\"product-details-img product-single__photos bottom\">\n                <div className=\"zoompro-wrap product-zoom-right pl-20\">\n                  <div className=\"zoompro-span\">\n                    <img\n                      className=\"blur-up lazyload zoompro\"\n                      alt=\"\"\n                      src={bookDetail.images ? bookDetail.images : null}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6 col-md-6 col-sm-12 col-12\">\n              <div className=\"product-single__meta\">\n                <h1 className=\"product-single__title\">\n                  {bookDetail.book_name}\n                </h1>\n                <div className=\"prInfoRow\">\n                  <div className=\"product-stock\">\n                    Author:\n                    {bookDetail.authors\n                      ? bookDetail.authors.map((item) => (\n                          <span\n                            style={{ marginLeft: 3 }}\n                            className=\"instock\"\n                            key={item._id}\n                          >\n                            {item.authorName}\n                          </span>\n                        ))\n                      : null}\n                  </div>\n                  <div className=\"product-sku\">\n                    Publisher:{\" \"}\n                    <span className=\"variant-sku\">\n                      {publisher.publisherName}\n                    </span>\n                  </div>\n                </div>\n                <p className=\"product-single__price product-single__price-product-template\">\n                  <span className=\"visually-hidden\">Regular price</span>\n                  <span className=\"product-price__price product-price__price-product-template product-price__sale product-price__sale--single\">\n                    <span id=\"ProductPrice-product-template\">\n                      <span className=\"money\">\n                        {bookDetail.price} eCoins/day\n                      </span>\n                    </span>\n                  </span>\n                </p>\n                {/* Product Action */}\n                <div className=\"product-action clearfix\">\n                  <Formik\n                    initialValues={orderInitialValues}\n                    onSubmit={async (values) => {\n                      try {\n                        if (!user._id) {\n                          return Alert.warning(\n                            `<div role=\"alert\">\n                                      Please sign in to read\n                                      </div>`,\n                            {\n                              html: true,\n                              position: \"top-right\",\n                              effect: \"slide\",\n                            }\n                          );\n                        }\n                        const totalPrice = values.totalDate * bookDetail.price;\n                        if (totalPrice > user.wallet) {\n                          return Alert.warning(\n                            `<div role=\"alert\">\n                                      Your eCoins are not enough to borrow this book\n                                      </div>`,\n                            {\n                              html: true,\n                              position: \"top-right\",\n                              effect: \"slide\",\n                            }\n                          );\n                        }\n                        values.price = totalPrice;\n                        values.userId = user._id;\n                        values.bookId = bookDetail._id;\n                        values.endAt = moment(new Date())\n                          .add(values.totalDate, \"day\")\n                          .format(\"YYYY-MM-DD\");\n                        values.startedAt = moment(new Date()).format(\n                          \"YYYY-MM-DD\"\n                        );\n\n                        const result = await createOrder(values);\n                        return Alert.success(\n                          `<div role=\"alert\">\n                                      ${result.data.message}\n                                      </div>`,\n                          {\n                            html: true,\n                            position: \"top-right\",\n                            effect: \"slide\",\n                          }\n                        );\n                      } catch (error) {\n                        return Alert.error(\n                          `<div role=\"alert\">\n                                  ${error.response.data.message}</div>`,\n                          {\n                            html: true,\n                            position: \"top-right\",\n                            effect: \"slide\",\n                          }\n                        );\n                      }\n                    }}\n                    validationSchema={orderValidationSchema}\n                  >\n                    {(props) => (\n                      <Form onSubmit={props.handleSubmit}>\n                        <div style={{ marginBottom: 5 }}>\n                          <span>Day number</span>\n                          <Form.Control\n                            type=\"number\"\n                            name=\"totalDate\"\n                            onChange={props.handleChange}\n                            onBlur={props.handleBlur}\n                            isInvalid={\n                              props.touched.totalDate && props.errors.totalDate\n                            }\n                          />\n                          <Form.Control.Feedback type=\"invalid\">\n                            {props.touched.totalDate && props.errors.totalDate}\n                          </Form.Control.Feedback>\n                        </div>\n                        <div className=\"product-form__item--submit\">\n                          <Button\n                            type=\"submit\"\n                            className=\"btn btn-success product-form__cart-submit\"\n                          >\n                            <span>{\"Borrow\"}</span>\n                          </Button>\n                        </div>\n                      </Form>\n                    )}\n                  </Formik>\n                </div>\n                {/* End Product Action */}\n                <div className=\"display-table shareRow\">\n                  <div className=\"display-table-cell medium-up--one-third\">\n                    <div className=\"wishlist-btn\">\n                      <button\n                        className=\"wishlist add-to-wishlist\"\n                        title=\"Add to Wishlist\"\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => {\n                          addToMyFavorite(bookDetail._id);\n                        }}\n                      >\n                        <FontAwesomeIcon\n                          icon={\n                            userFavorite.some((userId) => userId === user._id)\n                              ? fasHeart\n                              : faHeart\n                          }\n                          color={\n                            userFavorite.some((userId) => userId === user._id)\n                              ? \"#ed8a8a\"\n                              : \"#ececec\"\n                          }\n                        />\n                        <span>Add to Wishlist</span>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              {/*Product Tabs*/}\n            </div>\n          </div>\n          <div className=\"container\" style={{ marginTop: 10 }}>\n            <Tabs>\n              <TabList>\n                <Tab>Description</Tab>\n                <Tab\n                  onClick={() => {\n                    getReviews();\n                  }}\n                >\n                  Review\n                </Tab>\n              </TabList>\n\n              <TabPanel>\n                <p>{bookDetail.description}</p>\n              </TabPanel>\n              <TabPanel>\n                <Modal\n                  show={showWriteReview}\n                  size=\"lg\"\n                  aria-labelledby=\"contained-modal-title-vcenter\"\n                  centered\n                  onHide={() => {\n                    setWriteReview(false);\n                  }}\n                >\n                  <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                      My Review\n                    </Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>\n                    <Formik\n                      initialValues={initialValues}\n                      onSubmit={async (values) => {\n                        try {\n                          values.user = user._id;\n                          values.bookId = bookId;\n                          await createReview(values);\n                          setWriteReview(false);\n                          return Alert.success(\n                            `<div role=\"alert\">\n                                      Write review successfully\n                                      </div>`,\n                            {\n                              html: true,\n                              position: \"top-right\",\n                              effect: \"slide\",\n                            }\n                          );\n                        } catch (error) {\n                          return Alert.error(\n                            `<div role=\"alert\">\n                                  ${error.response.data.message}</div>`,\n                            {\n                              html: true,\n                              position: \"top-right\",\n                              effect: \"slide\",\n                            }\n                          );\n                        }\n                      }}\n                      validationSchema={validationSchema}\n                    >\n                      {(props) => (\n                        <Form\n                          onSubmit={props.handleSubmit}\n                          id=\"new-review-form\"\n                          className=\"new-review-form\"\n                        >\n                          <h3 className=\"spr-form-title\">Write a review</h3>\n                          <fieldset className=\"spr-form-review\">\n                            <div className=\"spr-form-review-body\">\n                              <label className=\"spr-form-label\">Content</label>\n                              <div className=\"spr-form-input\">\n                                <Form.Control\n                                  className=\"spr-form-input spr-form-input-textarea \"\n                                  name=\"content\"\n                                  as=\"textarea\"\n                                  rows={10}\n                                  placeholder=\"Write your review here\"\n                                  onChange={props.handleChange}\n                                  onBlur={props.handleBlur}\n                                  isInvalid={\n                                    props.touched.content &&\n                                    props.errors.content\n                                  }\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                  {props.touched.content &&\n                                    props.errors.content}\n                                </Form.Control.Feedback>\n                              </div>\n                            </div>\n                          </fieldset>\n                          <fieldset className=\"spr-form-actions\">\n                            <input\n                              type=\"submit\"\n                              className=\"spr-button spr-button-primary button button-primary btn btn-primary\"\n                              defaultValue=\"Submit Review\"\n                            />\n                          </fieldset>\n                        </Form>\n                      )}\n                    </Formik>\n                  </Modal.Body>\n                </Modal>\n                <div id=\"shopify-product-reviews\">\n                  <div className=\"spr-container\">\n                    <div className=\"spr-content\">\n                      {user._id ? (\n                        <div className=\"spr-form clearfix\">\n                          <button\n                            className=\"btn btn-primary\"\n                            onClick={() => {\n                              setWriteReview(true);\n                            }}\n                          >\n                            Write Review\n                          </button>\n                        </div>\n                      ) : null}\n\n                      <div className=\"spr-reviews\">\n                        {reviews.map((review) => (\n                          <div className=\"spr-review\" key={review._id}>\n                            <div className=\"spr-review-header\">\n                              <h3 className=\"spr-review-header-title\">\n                                <img\n                                  src={review.user.photoUrl}\n                                  alt=\"\"\n                                  className=\"border rounded-circle\"\n                                  style={{ width: 35, marginRight: 3 }}\n                                />\n                                {review.user.displayName}\n                              </h3>\n                              <span className=\"spr-review-header-byline\">\n                                <strong>\n                                  {moment(review.createdAt).format(\n                                    \"DD.MM.YYYY HH:mm\"\n                                  )}\n                                </strong>\n                              </span>\n                            </div>\n                            <div className=\"spr-review-content\">\n                              <p className=\"spr-review-content-body\">\n                                {review.content}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                        <button\n                          className=\"btn btn-dark\"\n                          onClick={() => {\n                            setReviewPage({\n                              ...reviewPage,\n                              limit: reviewPage.limit + 5,\n                            });\n                          }}\n                        >\n                          Load More\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TabPanel>\n            </Tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/phanhoang/Documents/Project/client/src/component/header/slide.js",[],"/Users/phanhoang/Documents/Project/client/src/reducers/review.reducer.js",[],"/Users/phanhoang/Documents/Project/client/src/component/book/book_favorite.js",["106"],"import React, { useEffect, useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { myFavorites, FavoriteBook } from \"../../api/index\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport queryString from \"query-string\";\nimport Alert from \"react-s-alert\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\nexport const FavoriteBookComponent = () => {\n  const dispatch = useDispatch();\n  const [books, setBooks] = useState([]);\n  const [isLoad, setLoad] = useState(false);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 5,\n  });\n  const userId = localStorage.getItem(\"_id\");\n  const formSignIn = useSelector((state) => {\n    return state.formLoginStatus.data;\n  });\n  const getBookByUser = async () => {\n    try {\n      if (userId === null) {\n        dispatch({ type: \"FORM_LOGIN_STATUS\", payload: true });\n      } else {\n        const paramsString = queryString.stringify(pagination);\n        const response = await myFavorites(\n          localStorage.getItem(\"_id\"),\n          paramsString\n        );\n        setBooks(response.data.data);\n      }\n    } catch (error) {\n      return Alert.error(\n        `<div role=\"alert\">\n         ${error.response.data.message}</div>`,\n        {\n          html: true,\n          position: \"top-right\",\n          effect: \"slide\",\n        }\n      );\n    }\n  };\n  useEffect(() => {\n    getBookByUser();\n  }, [pagination, isLoad, formSignIn]);\n  const removeFavorites = async (id) => {\n    await FavoriteBook({\n      bookId: id,\n      userId: userId,\n    });\n    setLoad(!isLoad);\n  };\n  const loadMore = () => {\n    setPagination({ ...pagination, limit: pagination.limit + 5 });\n  };\n  return (\n    <div style={{ marginBottom: \"20%\" }}>\n      <Alert stack={{ limit: 3 }} />\n      <div className=\"page section-header text-center\">\n        <div className=\"page-title\">\n          <div className=\"wrapper\">\n            <h1 className=\"page-width\">Favorite List</h1>\n          </div>\n        </div>\n      </div>\n      {/*End Page Title*/}\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12 col-sm-12 col-md-12 col-lg-12 main-col\">\n            <div className=\"table-content table-responsive\">\n              <table className=\"table table-bordered\">\n                <thead>\n                  <tr>\n                    <th className=\"product-name text-center alt-font\">\n                      Remove\n                    </th>\n                    <th className=\"product-price text-center alt-font\">\n                      Images\n                    </th>\n                    <th className=\"product-name alt-font\">Book Name</th>\n                    <th className=\"product-price text-center alt-font\">\n                      Price: eCoins\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {books.map((book) => (\n                    <tr>\n                      <td\n                        className=\"product-remove text-center\"\n                        valign=\"middle\"\n                      >\n                        <button\n                          className=\"btn btn-danger\"\n                          onClick={() => {\n                            removeFavorites(book._id);\n                          }}\n                        >\n                          <i className=\"icon icon anm anm-times-l\" />\n                        </button>\n                      </td>\n                      <td className=\"product-thumbnail text-center\">\n                        <NavLink to={`books/${book._id}`}>\n                          <img\n                            src={book.images}\n                            alt=\"\"\n                            title\n                            style={{ height: 60, width: 60 }}\n                          />\n                        </NavLink>\n                      </td>\n                      <td\n                        className=\"product-name\"\n                        style={{ height: 100, width: 400 }}\n                      >\n                        <p className=\"no-margin\">\n                          <NavLink to={`books/${book._id}`}>\n                            {book.book_name}\n                          </NavLink>\n                        </p>\n                      </td>\n                      <td className=\"product-price text-center\">\n                        <span className=\"amount\">{book.price}</span>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <button\n              className=\"btn btn-dark\"\n              onClick={() => {\n                loadMore();\n              }}\n            >\n              Load More\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/phanhoang/Documents/Project/client/src/utils/paypal.js",[],"/Users/phanhoang/Documents/Project/client/src/reducers/formLogin.js",[],"/Users/phanhoang/Documents/Project/client/src/component/myLibrary/myLibrary.js",["107","108","109","110","111","112","113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":34,"column":6,"nodeType":"120","endLine":34,"endColumn":32,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":89,"column":10,"nodeType":"124","messageId":"125","endLine":89,"endColumn":20},{"ruleId":"122","severity":1,"message":"126","line":89,"column":22,"nodeType":"124","messageId":"125","endLine":89,"endColumn":35},{"ruleId":"127","severity":1,"message":"128","line":272,"column":23,"nodeType":"129","endLine":272,"endColumn":63},{"ruleId":"127","severity":1,"message":"128","line":386,"column":15,"nodeType":"129","endLine":386,"endColumn":55},{"ruleId":"118","severity":1,"message":"130","line":72,"column":6,"nodeType":"120","endLine":72,"endColumn":35,"suggestions":"131"},{"ruleId":"118","severity":1,"message":"132","line":47,"column":6,"nodeType":"120","endLine":47,"endColumn":38,"suggestions":"133"},{"ruleId":"122","severity":1,"message":"134","line":3,"column":10,"nodeType":"124","messageId":"125","endLine":3,"endColumn":14},{"ruleId":"122","severity":1,"message":"135","line":3,"column":16,"nodeType":"124","messageId":"125","endLine":3,"endColumn":27},{"ruleId":"122","severity":1,"message":"136","line":3,"column":29,"nodeType":"124","messageId":"125","endLine":3,"endColumn":35},{"ruleId":"122","severity":1,"message":"137","line":10,"column":8,"nodeType":"124","messageId":"125","endLine":10,"endColumn":14},{"ruleId":"122","severity":1,"message":"138","line":20,"column":22,"nodeType":"124","messageId":"125","endLine":20,"endColumn":35},{"ruleId":"118","severity":1,"message":"139","line":43,"column":6,"nodeType":"120","endLine":43,"endColumn":26,"suggestions":"140"},{"ruleId":"118","severity":1,"message":"141","line":62,"column":6,"nodeType":"120","endLine":62,"endColumn":24,"suggestions":"142"},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["145"],"no-unused-vars","'userWallet' is assigned a value but never used.","Identifier","unusedVar","'setUserWallet' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getReviews'. Either include it or remove the dependency array.",["146"],"React Hook useEffect has a missing dependency: 'getBookByUser'. Either include it or remove the dependency array.",["147"],"'Card' is defined but never used.","'CardColumns' is defined but never used.","'Button' is defined but never used.","'moment' is defined but never used.","'setPagination' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getBooks'. Either include it or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'getBooksStatus'. Either include it or remove the dependency array.",["149"],"no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [props.pagination, isLoad, getData]",{"range":"160","text":"161"},"Update the dependencies array to be: [showWriteReview, reviewPage, getReviews]",{"range":"162","text":"163"},"Update the dependencies array to be: [pagination, isLoad, formSignIn, getBookByUser]",{"range":"164","text":"165"},"Update the dependencies array to be: [pagination, isLoad, getBooks]",{"range":"166","text":"167"},"Update the dependencies array to be: [getBooksStatus, paginationStatus]",{"range":"168","text":"169"},[1310,1336],"[props.pagination, isLoad, getData]",[2459,2488],"[showWriteReview, reviewPage, getReviews]",[1456,1488],"[pagination, isLoad, formSignIn, getBookByUser]",[1467,1487],"[pagination, isLoad, getBooks]",[1991,2009],"[getBooksStatus, paginationStatus]"]